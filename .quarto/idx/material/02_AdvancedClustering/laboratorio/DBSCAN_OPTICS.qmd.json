{"title":"DBSCAN i OPTICS","markdown":{"yaml":{"title":"DBSCAN i OPTICS","author":"Dante Conti, Sergi Ramirez, (c) IDEAI","date":"`r Sys.Date()`","date-modified":"`r Sys.Date()`","toc":true,"number-sections":true,"format":{"html":{"theme":{"light":"cerulean","dark":"darkly"}}},"editor":"visual"},"headingText":"Descripció del problema","containsRefs":false,"markdown":"\n\n\n```{r}\n#| label: carregar-llibreries\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\n# Cargamos las librerias necesarias\nlibrary(cluster)\nlibrary(fpc)\nlibrary(pracma)\nlibrary(factoextra)\nlibrary(dbscan)\n```\n\n```{r}\n#| label: generar-semilla\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\n### Generamos una semilla para poder ejecutar los datos\nset.seed(04102022)\n```\n\n\n```{r}\n#| label: carregar-dades\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\n### Creamos la base de datos que vamos a utilizar para detectar los grupos\ndata(\"multishapes\")\ndatos <- multishapes[, 1:2]\n\n### Printamos la imagen que hemos obtenido de los datos a clasificar\nggplot2::ggplot(datos, aes(x = x, y = y)) + \n  ggplot2::geom_point(color='#3333FF')\n```\n\n###  KMeans\n\nGraficamos los datos a través de un k-means para visualizar como quedarian los grupos cuando utilizamos unos algoritmos de agrupación a partir de la inercia.\n\n```{r}\n#| label: kmeans-dades\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nkm_clusters <- kmeans(x = datos, centers = 5, nstart = 50)\nfviz_cluster(object = km_clusters, data = datos, geom = \"point\", ellipse = FALSE,\n             show.clust.cent = FALSE, pallete = \"jco\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n\nComo podemos ver, Kmeans ha hecho una muy mala clusterización, puesto que:\n\n- No ha conseguido clusterizar según las formas complejas del modelo.\n\n- No ha tenido en cuenta que existen outliers, incluyendolos en los distintos clusters\n\n### DBSCAN\n\nDBSCAN parte de dos parámetros que son: \n\n- eps: distancia máxima a la que debe haber otra observación para ser considerar que cumple con el criterio de *\"estar cerca\"*\n\n- `minPts`: paámetro que controla la densidad mínima requerida para que un punto sea considerado un núcleo y se incluya en un grupo/cluster.\n\nPara un punto $p$, si existen al menos `minPts` puntos dentro del radio `eps` alrededor de $p$, entonces $p$ se considera un núcleo (*core point*) y se incluye en el mismo grupo/clúster que los demás puntos dentro del radio `eps`. \n\nSi no hay suficientes puntos dentro del radio `eps`, $p$ se considera un punto frontera (*border point*) y se incluye en el mismo grupo/clúster que su punto núcleo más cercano. \n\nSi no hay ningún punto dentro del radio `eps`, $p$ se considera un punto de ruido (*noise point*) y no se incluye en ningún grupo/cluster.\n\nAplicamos el algoritmo de dbscan para classificar los datos.\n\n```{r}\n#| label: dbscan\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\ndbscan_res <- dbscan::dbscan(datos, eps = 0.15, minPts = 5)\n```\n\nGraficamos el dbscan obtenido \n\n```{r}\n#| label: visualizar-dbscan\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nfviz_cluster(object = dbscan_res, data = datos, geom = \"point\", ellipse = FALSE,\n             show.clust.cent = FALSE, pallete = \"jco\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n\nPara escoger los valores de `eps` i `minPts`, necesitaremos optimizar el proceso. Para ello, realizaremos la siguiente técnica de optimización. \n\n# Cálculo de min_pts\n\nEl parámetro `min_pts` establece el número de puntos mínimo que, dado un radio `eps`, tiene que haber para que se considere que dichos puntos forman un cluster.\n\nUn valor bajo de `min_pts` asegurará que mas puntos son agrupados, pero se corre el riesgo de agrupar outliers. Por el contrario, un valor muy alto de `min_pts` puede descartar valores que no son anómalos.\n\n\nEn la literatura hablan de usar un valor entre 3 y 5 ya que funcionan bastante bien en la mayoría de los casos. `minPts` igual 2 cuando tenemos una distribución normal y otra nube de outliers\n\nPara calcularlo de manera empírica, diremos que el mínimo de puntos sea igual al 0.2% - 0.25% del total de los datos teniendo en cuenta que: \n\n- El minimo será de 2 para datos que sean muy pequeños\n\n- El máximo será de 10 para datos con mucha información o quizás\n\n- un poco más dependiendo del tamaño de la base de datos\n\n```{r}\n#| label: calculo-minPts\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nporcentaje <- 0.0025 \n\n# Cálculo de min_pts. \nmin_pts <- round(nrow(datos) * porcentaje) \nmin_pts\n\n# Realizamos los cortes de 2 y 10 que se mencionan anteriormente como validación\n# adicional, pero lineas 98 y 99 pueden comentarse.\nmin_pts <- ifelse(min_pts <= 1, 2, min_pts)\nmin_pts <- ifelse(min_pts >= 10, 10, min_pts)\nmin_pts \n```\n\n## Normalización de los datos \n\nEste proceso **siempre se ha de realizar** para que cualquier variable tenga el mismo peso delante del cálculo del *clustering*. \n\nCuando trabajamos con distáncias es aconsejable normalizar los datos para que ninguno tenga un peso que no le corresponde.\n\n```{r}\n#| label: normalizacion2\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\ndatos_norm <- data.frame(lapply(datos, scales::rescale))\nhead(datos_norm)\n\nggplot2::ggplot(datos_norm, aes(x = x, y = y)) + \n  ggplot2::geom_point(color='#3333FF')\n```\n\nComo podemos ver, ahora tendremos los valores entre el intervalo [0, 1]. \n\n## Calculo de la Epsilon (`eps`)\n\nRealizamos el cálculo de las distancias mas cercanas en una matriz de puntos\n\n```{r}\n#| label: vecindad-distancias\n#| echo: true\n#| eval: false\n#| warning: false\n#| message: false\n#| error: false\n\ndistanciasVecinas <- dbscan::kNNdist(datos, k = min_pts)\n```\n\nOrdenamos los puntos de menos a mayor y lo guardamos en un vector. Cuando realicemos el gráfico *elbow*, será nuestro eje de las Y\n\n```{r}\n#| label: indice-Y\n#| echo: true\n#| eval: false\n#| warning: false\n#| message: false\n#| error: false\n\nY <- distanciasVecinas[order(distanciasVecinas)]\n```\n\nCalculamos el índice del eje de la X\n\n```{r}\n#| label: indice-X\n#| echo: true\n#| eval: false\n#| warning: false\n#| message: false\n#| error: false\n\nX <- c(0:(length(Y) - 1))\n```\n\nA continuación calculamos las pendientes\n\n```{r}\n#| label: calculo-pendiente\n#| echo: true\n#| eval: false\n#| warning: false\n#| message: false\n#| error: false\n\npendientes <- c()\nfor (i in 1:length(X)) {\n  pendientes[i] <- (Y[i + 1] - Y[i])/(X[i+1] - X[i])\n}\n\nm <- which.max(pendientes)\nprimer <- gdata::first(which(pendientes >= m))\nepsilon <- Y[primer]\n```\n**Nota**, ejecutar lineas 131 y 132 para decidir el corte en el máximo cambio de la pendiente, como podeís apreciar ocurre alrededor de 0.15. Esto se hace trazando una recta horizontal desde el mayor cambio y viendo\nsu valor en el eje Y.\n\n## Graficamos os epsilon ordenados \n\n```{r}\n#| label: graficar-epsilon\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\n{kNNdistplot(datos, k = 5, minPts = min_pts)\n  abline(h = 0.15, lty = 2, col = \"red\")}\n```\n\nMirando el gráfico *elbow* vemos que el epsilon es 0.15.\n\n```{r}\n#| label: valor-epsilon\n#| echo: false\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nepsilon <- 0.15\n```\n\nVolvemos a ejecutar el **DBSCAN** con los parámetros óptimos.\n\n```{r}\n#| label: optimizacion-parametros\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nres <- dbscan(datos, eps = epsilon, minPts = min_pts) \n```\n\n\n\n## Bibliografia\n\n-   Beautiful dendrogram visualizations in r: 5+ must known methods - unsupervised machine learning - easy guides - wiki - sthda. (s.f.). Recuperado 11 de enero de 2025, de <https://www.sthda.com/english/wiki/beautiful-dendrogram-visualizations-in-r-5-must-known-methods-unsupervised-machine-learning?title=beautiful-dendrogram-visualizations-in-r-5-must-known-methods-unsupervised-machine-learning>\n\n-   Dendrograms. (s.f.). Recuperado 11 de enero de 2025, de <https://plotly.com/ggplot2/dendrogram/>\n\n-   Introduction. (s.f.). \\[Software\\]. Recuperado 11 de enero de 2025, de <https://cran.r-project.org/web/packages/dendextend/vignettes/dendextend.html>\n\n-   RPubs—Clustering de series temporales a traves de metodos no parametricos. (s.f.). Recuperado 11 de enero de 2025, de <https://rpubs.com/Edison-D/615477>\n\n-   RPubs—Dinamyc time warping. (s.f.). Recuperado 11 de enero de 2025, de <https://rpubs.com/sebas_Alf/684217>\n\n-   Sardá, A. (2024). Asardaes/dtwclust \\[R\\]. <https://github.com/asardaes/dtwclust> (Obra original publicada en 2015)\n","srcMarkdownNoYaml":"\n\n# Descripció del problema\n\n```{r}\n#| label: carregar-llibreries\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\n# Cargamos las librerias necesarias\nlibrary(cluster)\nlibrary(fpc)\nlibrary(pracma)\nlibrary(factoextra)\nlibrary(dbscan)\n```\n\n```{r}\n#| label: generar-semilla\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\n### Generamos una semilla para poder ejecutar los datos\nset.seed(04102022)\n```\n\n\n```{r}\n#| label: carregar-dades\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\n### Creamos la base de datos que vamos a utilizar para detectar los grupos\ndata(\"multishapes\")\ndatos <- multishapes[, 1:2]\n\n### Printamos la imagen que hemos obtenido de los datos a clasificar\nggplot2::ggplot(datos, aes(x = x, y = y)) + \n  ggplot2::geom_point(color='#3333FF')\n```\n\n###  KMeans\n\nGraficamos los datos a través de un k-means para visualizar como quedarian los grupos cuando utilizamos unos algoritmos de agrupación a partir de la inercia.\n\n```{r}\n#| label: kmeans-dades\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nkm_clusters <- kmeans(x = datos, centers = 5, nstart = 50)\nfviz_cluster(object = km_clusters, data = datos, geom = \"point\", ellipse = FALSE,\n             show.clust.cent = FALSE, pallete = \"jco\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n\nComo podemos ver, Kmeans ha hecho una muy mala clusterización, puesto que:\n\n- No ha conseguido clusterizar según las formas complejas del modelo.\n\n- No ha tenido en cuenta que existen outliers, incluyendolos en los distintos clusters\n\n### DBSCAN\n\nDBSCAN parte de dos parámetros que son: \n\n- eps: distancia máxima a la que debe haber otra observación para ser considerar que cumple con el criterio de *\"estar cerca\"*\n\n- `minPts`: paámetro que controla la densidad mínima requerida para que un punto sea considerado un núcleo y se incluya en un grupo/cluster.\n\nPara un punto $p$, si existen al menos `minPts` puntos dentro del radio `eps` alrededor de $p$, entonces $p$ se considera un núcleo (*core point*) y se incluye en el mismo grupo/clúster que los demás puntos dentro del radio `eps`. \n\nSi no hay suficientes puntos dentro del radio `eps`, $p$ se considera un punto frontera (*border point*) y se incluye en el mismo grupo/clúster que su punto núcleo más cercano. \n\nSi no hay ningún punto dentro del radio `eps`, $p$ se considera un punto de ruido (*noise point*) y no se incluye en ningún grupo/cluster.\n\nAplicamos el algoritmo de dbscan para classificar los datos.\n\n```{r}\n#| label: dbscan\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\ndbscan_res <- dbscan::dbscan(datos, eps = 0.15, minPts = 5)\n```\n\nGraficamos el dbscan obtenido \n\n```{r}\n#| label: visualizar-dbscan\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nfviz_cluster(object = dbscan_res, data = datos, geom = \"point\", ellipse = FALSE,\n             show.clust.cent = FALSE, pallete = \"jco\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n```\n\nPara escoger los valores de `eps` i `minPts`, necesitaremos optimizar el proceso. Para ello, realizaremos la siguiente técnica de optimización. \n\n# Cálculo de min_pts\n\nEl parámetro `min_pts` establece el número de puntos mínimo que, dado un radio `eps`, tiene que haber para que se considere que dichos puntos forman un cluster.\n\nUn valor bajo de `min_pts` asegurará que mas puntos son agrupados, pero se corre el riesgo de agrupar outliers. Por el contrario, un valor muy alto de `min_pts` puede descartar valores que no son anómalos.\n\n\nEn la literatura hablan de usar un valor entre 3 y 5 ya que funcionan bastante bien en la mayoría de los casos. `minPts` igual 2 cuando tenemos una distribución normal y otra nube de outliers\n\nPara calcularlo de manera empírica, diremos que el mínimo de puntos sea igual al 0.2% - 0.25% del total de los datos teniendo en cuenta que: \n\n- El minimo será de 2 para datos que sean muy pequeños\n\n- El máximo será de 10 para datos con mucha información o quizás\n\n- un poco más dependiendo del tamaño de la base de datos\n\n```{r}\n#| label: calculo-minPts\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nporcentaje <- 0.0025 \n\n# Cálculo de min_pts. \nmin_pts <- round(nrow(datos) * porcentaje) \nmin_pts\n\n# Realizamos los cortes de 2 y 10 que se mencionan anteriormente como validación\n# adicional, pero lineas 98 y 99 pueden comentarse.\nmin_pts <- ifelse(min_pts <= 1, 2, min_pts)\nmin_pts <- ifelse(min_pts >= 10, 10, min_pts)\nmin_pts \n```\n\n## Normalización de los datos \n\nEste proceso **siempre se ha de realizar** para que cualquier variable tenga el mismo peso delante del cálculo del *clustering*. \n\nCuando trabajamos con distáncias es aconsejable normalizar los datos para que ninguno tenga un peso que no le corresponde.\n\n```{r}\n#| label: normalizacion2\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\ndatos_norm <- data.frame(lapply(datos, scales::rescale))\nhead(datos_norm)\n\nggplot2::ggplot(datos_norm, aes(x = x, y = y)) + \n  ggplot2::geom_point(color='#3333FF')\n```\n\nComo podemos ver, ahora tendremos los valores entre el intervalo [0, 1]. \n\n## Calculo de la Epsilon (`eps`)\n\nRealizamos el cálculo de las distancias mas cercanas en una matriz de puntos\n\n```{r}\n#| label: vecindad-distancias\n#| echo: true\n#| eval: false\n#| warning: false\n#| message: false\n#| error: false\n\ndistanciasVecinas <- dbscan::kNNdist(datos, k = min_pts)\n```\n\nOrdenamos los puntos de menos a mayor y lo guardamos en un vector. Cuando realicemos el gráfico *elbow*, será nuestro eje de las Y\n\n```{r}\n#| label: indice-Y\n#| echo: true\n#| eval: false\n#| warning: false\n#| message: false\n#| error: false\n\nY <- distanciasVecinas[order(distanciasVecinas)]\n```\n\nCalculamos el índice del eje de la X\n\n```{r}\n#| label: indice-X\n#| echo: true\n#| eval: false\n#| warning: false\n#| message: false\n#| error: false\n\nX <- c(0:(length(Y) - 1))\n```\n\nA continuación calculamos las pendientes\n\n```{r}\n#| label: calculo-pendiente\n#| echo: true\n#| eval: false\n#| warning: false\n#| message: false\n#| error: false\n\npendientes <- c()\nfor (i in 1:length(X)) {\n  pendientes[i] <- (Y[i + 1] - Y[i])/(X[i+1] - X[i])\n}\n\nm <- which.max(pendientes)\nprimer <- gdata::first(which(pendientes >= m))\nepsilon <- Y[primer]\n```\n**Nota**, ejecutar lineas 131 y 132 para decidir el corte en el máximo cambio de la pendiente, como podeís apreciar ocurre alrededor de 0.15. Esto se hace trazando una recta horizontal desde el mayor cambio y viendo\nsu valor en el eje Y.\n\n## Graficamos os epsilon ordenados \n\n```{r}\n#| label: graficar-epsilon\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\n{kNNdistplot(datos, k = 5, minPts = min_pts)\n  abline(h = 0.15, lty = 2, col = \"red\")}\n```\n\nMirando el gráfico *elbow* vemos que el epsilon es 0.15.\n\n```{r}\n#| label: valor-epsilon\n#| echo: false\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nepsilon <- 0.15\n```\n\nVolvemos a ejecutar el **DBSCAN** con los parámetros óptimos.\n\n```{r}\n#| label: optimizacion-parametros\n#| echo: true\n#| eval: true\n#| warning: false\n#| message: false\n#| error: false\n\nres <- dbscan(datos, eps = epsilon, minPts = min_pts) \n```\n\n\n\n## Bibliografia\n\n-   Beautiful dendrogram visualizations in r: 5+ must known methods - unsupervised machine learning - easy guides - wiki - sthda. (s.f.). Recuperado 11 de enero de 2025, de <https://www.sthda.com/english/wiki/beautiful-dendrogram-visualizations-in-r-5-must-known-methods-unsupervised-machine-learning?title=beautiful-dendrogram-visualizations-in-r-5-must-known-methods-unsupervised-machine-learning>\n\n-   Dendrograms. (s.f.). Recuperado 11 de enero de 2025, de <https://plotly.com/ggplot2/dendrogram/>\n\n-   Introduction. (s.f.). \\[Software\\]. Recuperado 11 de enero de 2025, de <https://cran.r-project.org/web/packages/dendextend/vignettes/dendextend.html>\n\n-   RPubs—Clustering de series temporales a traves de metodos no parametricos. (s.f.). Recuperado 11 de enero de 2025, de <https://rpubs.com/Edison-D/615477>\n\n-   RPubs—Dinamyc time warping. (s.f.). Recuperado 11 de enero de 2025, de <https://rpubs.com/sebas_Alf/684217>\n\n-   Sardá, A. (2024). Asardaes/dtwclust \\[R\\]. <https://github.com/asardaes/dtwclust> (Obra original publicada en 2015)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"number-sections":true,"output-file":"DBSCAN_OPTICS.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.33","theme":{"light":"cerulean","dark":"darkly"},"title":"DBSCAN i OPTICS","author":"Dante Conti, Sergi Ramirez, (c) IDEAI","date":"`r Sys.Date()`","date-modified":"`r Sys.Date()`","editor":"visual"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}