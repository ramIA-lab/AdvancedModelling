V3 == 8 ~ "Euskaltel",
V3 == 18 ~ "ONO",
V3 == 19 ~ "Simyo",
V3 == 20 ~ "Fonyou",
V3 == 21 ~ "Jazztel",
V3 == 22 ~ "DIGI mobil",
V3 == 25 ~ "Xfera Moviles",
.default = "Sin identificar"
)) %>%
rename(radio = 1, mcc = 2, net = 3, area = 4, cell = 5,
unit = 6, lon = 7, lat = 8, range = 9, samples = 10,
changeable = 11, created = 12, updated = 13, averageSignal = 14) %>%
mutate(updated = as.Date(as.POSIXct(updated, origin="1970-01-01"))) %>%
select(radio, net, area, lon, lat, samples, updated, averageSignal)
head(datosProces)
# ============== Preprocessing estaciones de señal movil ==============
library(dplyr)
library(tidyr)
# Leemos los datos
path <- 'D:/DOCENCIA/CURS/00 - DOCENCIA 2022 - 2023/S02/S02 - UPC - GRAU DE INTELIGENCIA ARTIFICIAL - PREPROCESSAMENT I MODELITZACIÓ AVANÇADA DE DADES/03_laboratoris/data/'
datos <- read.csv(paste0(path, "214.csv"), header = FALSE)
datosProces <- datos %>%
mutate(V3 = case_when(
V3 == 0 ~ "Test",
V3 == 1 | V3 == 6 ~ "Vodafone",
V3 == 3 ~ "Orange",
V3 == 4 ~ "Yoigo",
V3 == 5 | V3 == 7 ~ "Movistar",
V3 == 8 ~ "Euskaltel",
V3 == 18 ~ "ONO",
V3 == 19 ~ "Simyo",
V3 == 20 ~ "Fonyou",
V3 == 21 ~ "Jazztel",
V3 == 22 ~ "DIGI mobil",
V3 == 25 ~ "Xfera Moviles",
.default = "Sin identificar"
)) %>%
rename(radio = 1, mcc = 2, net = 3, area = 4, cell = 5,
unit = 6, lon = 7, lat = 8, range = 9, samples = 10,
changeable = 11, created = 12, updated = 13, averageSignal = 14) %>%
mutate(updated = as.Date(as.POSIXct(updated, origin="1970-01-01"))) %>%
select(radio, net, area, lon, lat, samples, updated, averageSignal) %>%
mutate(anyo = substr(updated, 1, 4), mes = substr(updated, 6, 7))
head(datosProces)
table(datosPre)
table(datosProces$mes)
table(datosProces$anyo)
datosProces <- datos %>%
mutate(V3 = case_when(
V3 == 0 ~ "Test",
V3 == 1 | V3 == 6 ~ "Vodafone",
V3 == 3 ~ "Orange",
V3 == 4 ~ "Yoigo",
V3 == 5 | V3 == 7 ~ "Movistar",
V3 == 8 ~ "Euskaltel",
V3 == 18 ~ "ONO",
V3 == 19 ~ "Simyo",
V3 == 20 ~ "Fonyou",
V3 == 21 ~ "Jazztel",
V3 == 22 ~ "DIGI mobil",
V3 == 25 ~ "Xfera Moviles",
.default = "Sin identificar"
)) %>%
rename(radio = 1, mcc = 2, net = 3, area = 4, cell = 5,
unit = 6, lon = 7, lat = 8, range = 9, samples = 10,
changeable = 11, created = 12, updated = 13, averageSignal = 14) %>%
mutate(updated = as.Date(as.POSIXct(updated, origin="1970-01-01"))) %>%
select(radio, net, area, lon, lat, samples, updated, averageSignal) %>%
mutate(anyo = substr(updated, 1, 4), mes = substr(updated, 6, 7)) %>%
filter(anyo == 2023)
head(datosProces)
datosProces <- datos %>%
mutate(V3 = case_when(
V3 == 0 ~ "Test",
V3 == 1 | V3 == 6 ~ "Vodafone",
V3 == 3 ~ "Orange",
V3 == 4 ~ "Yoigo",
V3 == 5 | V3 == 7 ~ "Movistar",
V3 == 8 ~ "Euskaltel",
V3 == 18 ~ "ONO",
V3 == 19 ~ "Simyo",
V3 == 20 ~ "Fonyou",
V3 == 21 ~ "Jazztel",
V3 == 22 ~ "DIGI mobil",
V3 == 25 ~ "Xfera Moviles",
.default = "Sin identificar"
)) %>%
rename(radio = 1, mcc = 2, net = 3, area = 4, cell = 5,
unit = 6, lon = 7, lat = 8, range = 9, samples = 10,
changeable = 11, created = 12, updated = 13, averageSignal = 14) %>%
mutate(updated = as.Date(as.POSIXct(updated, origin="1970-01-01"))) %>%
select(radio, net, area, lon, lat, samples, updated, averageSignal) %>%
mutate(anyo = substr(updated, 1, 4), mes = substr(updated, 6, 7)) %>%
filter(anyo == 2023) %>%
select(-updated)
head(datosProces)
table(datosProces$averageSignal)
datosProces <- datos %>%
mutate(V3 = case_when(
V3 == 0 ~ "Test",
V3 == 1 | V3 == 6 ~ "Vodafone",
V3 == 3 ~ "Orange",
V3 == 4 ~ "Yoigo",
V3 == 5 | V3 == 7 ~ "Movistar",
V3 == 8 ~ "Euskaltel",
V3 == 18 ~ "ONO",
V3 == 19 ~ "Simyo",
V3 == 20 ~ "Fonyou",
V3 == 21 ~ "Jazztel",
V3 == 22 ~ "DIGI mobil",
V3 == 25 ~ "Xfera Moviles",
.default = "Sin identificar"
)) %>%
rename(radio = 1, mcc = 2, net = 3, area = 4, cell = 5,
unit = 6, lon = 7, lat = 8, range = 9, samples = 10,
changeable = 11, created = 12, updated = 13, averageSignal = 14) %>%
mutate(updated = as.Date(as.POSIXct(updated, origin="1970-01-01"))) %>%
select(radio, net, area, lon, lat, samples, updated, averageSignal) %>%
mutate(anyo = substr(updated, 1, 4), mes = substr(updated, 6, 7)) %>%
filter(anyo == 2023) %>%
select(-updated, -averageSignal)
table(datosProces$radio)
table(datosProces$net)
datosProces %>% group_by(net)
datosProces %>% group_by(net, anyo)
datosProces %>% group_by(net, anyo, mes)
datosProces %>% group_by(net, anyo, mes) %>% filter(net == "Movistar")
datosProces %>% filter(net == "Movistar") %>% group_by(net, anyo, mes)
datosProces <- datos %>%
mutate(V3 = case_when(
V3 == 0 ~ "Test",
V3 == 1 | V3 == 6 ~ "Vodafone",
V3 == 3 ~ "Orange",
V3 == 4 ~ "Yoigo",
V3 == 5 | V3 == 7 ~ "Movistar",
V3 == 8 ~ "Euskaltel",
V3 == 18 ~ "ONO",
V3 == 19 ~ "Simyo",
V3 == 20 ~ "Fonyou",
V3 == 21 ~ "Jazztel",
V3 == 22 ~ "DIGI mobil",
V3 == 25 ~ "Xfera Moviles",
.default = "Sin identificar"
)) %>%
rename(radio = 1, mcc = 2, net = 3, area = 4, cell = 5,
unit = 6, lon = 7, lat = 8, range = 9, samples = 10,
changeable = 11, created = 12, updated = 13, averageSignal = 14) %>%
mutate(updated = as.Date(as.POSIXct(updated, origin="1970-01-01"))) %>%
select(radio, net, area, lon, lat, samples, updated, averageSignal) %>%
mutate(anyo = substr(updated, 1, 4), mes = substr(updated, 6, 7)) %>%
filter(anyo == 2023) %>%
select(-updated, -averageSignal) %>%
data.frame()
head(datosProces)
library(sf)
# Leer los datos de secciones censales (polígonos)
secciones <- st_read(dsn = "C:/Users/sergi/Downloads/seccionado_2024", layer = "SECC_CE_20240101")  # Reemplaza con tu archivo
puntos <- data.frame(
id = 1:5,  # Ejemplo de IDs
lon = c(-3.70379, -3.70849, -3.70129, -3.71109, -3.69909),
lat = c(40.41678, 40.41809, 40.41529, 40.41219, 40.41909)
)
# Convertir los puntos en un objeto sf
puntos_sf <- st_as_sf(puntos, coords = c("lon", "lat"), crs = 4326)  # CRS: WGS84
# Asegúrate de que las secciones y los puntos estén en el mismo CRS
secciones <- st_transform(secciones, crs = 4326)
# Realizar el overlay (asociar cada punto con su sección censal)
resultado <- st_join(puntos_sf, secciones, join = st_within)
secciones
secciones <- st_make_valid(secciones)
# Asegúrate de que las secciones y los puntos estén en el mismo CRS
secciones <- st_transform(secciones, crs = 4326)
# Realizar el overlay (asociar cada punto con su sección censal)
resultado <- st_join(puntos_sf, secciones, join = st_within)
# Mostrar el resultado
print(resultado)
puntos_sf <- st_as_sf(datosProces, coords = c("lon", "lat"), crs = 4326)  # CRS: WGS84
puntos_sf
# Realizar el overlay (asociar cada punto con su sección censal)
resultado <- st_join(puntos_sf, secciones, join = st_within)
# Mostrar el resultado
print(resultado)
# cambiamos la tabla
datosT <- resultado[, c("net", "samples", "CUSEC")]
head(datosT)
# cambiamos la tabla
datosT <- data.frame(resultado[, c("net", "samples", "CUSEC")])
head(datosT)
datosT <- datosT[, c("net", "samples", "CUSEC")]
head(datosT)
library(reshape2)
reshape2::dcast(CUSEC ~ net)
reshape2::dcast(formula = "CUSEC ~ net", data = datosT)
reshape2::dcast(formula = "CUSEC ~ net + mes", data = datosT, fun.aggregate = "sum")
datosT <- data.frame(resultado[, c("net", "samples", "mes", "CUSEC")])
datosT <- datosT[, c("net", "samples", "mes", "CUSEC")]
head(datosT)
reshape2::dcast(formula = "CUSEC ~ net + mes", data = datosT, fun.aggregate = "sum")
reshape2::dcast(formula = "CUSEC ~ net + mes", data = datosT, value.var = "samples", fun.aggregate = "sum")
reshape2::dcast(formula = "CUSEC ~ net + mes", data = datosT, value.var = "samples", fun.aggregate = sum)
datosFinal <- reshape2::dcast(formula = "CUSEC ~ net + mes", data = datosT, value.var = "samples", fun.aggregate = sum)
head(datosFinal)
head(resultado)
datosT <- data.frame(resultado[, c("net", "samples", "mes", "NMUN", "CUSEC")])
datosT <- datosT[, c("net", "samples", "mes", "NMUN", "CUSEC")]
datosFinal <- reshape2::dcast(formula = "CUSEC + NMUN ~ net + mes", data = datosT, value.var = "samples", fun.aggregate = sum)
head(datosFinal)
View(datosFinal)
datosFinal <- reshape2::dcast(formula = "CUSEC + NMUN + mes ~ net", data = datosT, value.var = "samples", fun.aggregate = sum)
head(datosFinal)
datosFinal$suma <- colSums(datos[, c("Movistar", "Orange", "Vodafone", "Yoigo")])
datosFinal$suma <- colSums(datosFinal[, c("Movistar", "Orange", "Vodafone", "Yoigo")])
datosFinal$suma <- rowSums(datosFinal[, c("Movistar", "Orange", "Vodafone", "Yoigo")])
datosFinal
datosFinal[, c("Movistar", "Orange", "Vodafone", "Yoigo")]/datosFinal[, "suma"]
round(datosFinal[, c("Movistar", "Orange", "Vodafone", "Yoigo")]/datosFinal[, "suma"], 4)
datosFinal[, c("Movistar", "Orange", "Vodafone", "Yoigo")] <- round(datosFinal[, c("Movistar", "Orange", "Vodafone", "Yoigo")]/datosFinal[, "suma"], 4)
head(datosFinal)
datosFinal2 <- reshape2::dcast(formula = "CUSEC + NMUN ~ net + mes", data = datosFinal, value.var = "samples", fun.aggregate = sum)
#| label: carregar-dades
#| echo: true
#| eval: false
#| warning: false
#| message: false
#| error: false
## Ruta ón es troba les nostres dades
path <- "./"
## Nom del fitxer de les dades
fitxer <- ""
## Carreguem la base de dades
dades <- read.csv2(paste0(path, "Fraudulent_E-Commerce_Transaction_Data.csv"))
#| label: carregar-dades
#| echo: true
#| eval: false
#| warning: false
#| message: false
#| error: false
## Ruta ón es troba les nostres dades
path <- "./"
## Nom del fitxer de les dades
fitxer <- ""
## Carreguem la base de dades
dades <- read.csv(paste0(path, "Fraudulent_E-Commerce_Transaction_Data.csv"))
View(dades)
library(dplyr)
colnames(dades)
head(dades)
#| label: selecció-variables
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library(dplyr)
library(tidyr)
dades <- dades %>%
select(-Transaction.ID, -Customer.ID, -IP.Address, -Shipping.Address,
-Billing.Address) %>%
data.frame()
head(dades)
install.packages("labelled")
colnames(dades)
library(janitor)
dades <- dades %>%
janitor::clean_names()
colnames(dades)
#| label: preprocessing-dates
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library(janitor)
dades <- dades %>%
janitor::clean_names()
# Visualitzem el nom de les columnes
colnames(dades)
dim(dades)
# Visualitzem les dimensions de la nostra base de dades abans d'eliminar
cat("Tenim ", nrow(dades), " files i ", ncol(dades), " columnes\n")
cat("Després de l'eliminació ens queda ", nrow(dades), " files i ", ncol(dades),
" columnes\n")
dades <- dades %>%
janitor::remove_empty(which = c("rows", "cols"))
cat("Després de l'eliminació ens queda ", nrow(dades), " files i ", ncol(dades),
" columnes\n")
clases <- sapply(dades, class)
clases
varCat <- names(clases)[which(clases %in% c("character", "factor"))]
varCat
for (vC in varCat) {
dades %>%
count(get(vC))
}
for (vC in varCat) {
dades %>%
count(get(vC)) %>% print()
}
varNu
varCat
#| label: eliminar-variables
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
dades <- dades %>%
select(-transaction_date, -custom_location)
#| label: carregar-dades
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
## Ruta ón es troba les nostres dades
path <- "./"
## Nom del fitxer de les dades
fitxer <- ""
## Carreguem la base de dades
dades <- read.csv(paste0(path, "Fraudulent_E-Commerce_Transaction_Data.csv"))
#| label: selecció-variables
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library(dplyr)
library(tidyr)
dades <- dades %>%
select(-Transaction.ID, -Customer.ID, -IP.Address, -Shipping.Address,
-Billing.Address) %>%
data.frame()
reticulate::repl_python()
#| echo: false
#| warning: false
#| message: false
#| error: false
quit
#| label: preprocessing-dates
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library(janitor)
dades <- dades %>%
janitor::clean_names()
# Visualitzem el nom de les columnes
colnames(dades)
#| label: elimina-tot-NAs
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library(janitor)
# Visualitzem les dimensions de la nostra base de dades abans d'eliminar
cat("Tenim ", nrow(dades), " files i ", ncol(dades), " columnes\n")
dades <- dades %>%
janitor::remove_empty(which = c("rows", "cols"))
cat("Després de l'eliminació ens queda ", nrow(dades), " files i ", ncol(dades),
" columnes\n")
#| label: recoding
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
clases <- sapply(dades, class)
varCat <- names(clases)[which(clases %in% c("character", "factor"))]
for (vC in varCat) {
dades %>%
count(get(vC)) %>% print()
}
dades <- dades %>%
select(-transaction_date, -custom_location)
colnames(dades)
dades <- dades %>%
select(-transaction_date, -customer_location)
head(dades)
table(dades$device_used)
#| label: eliminar-variables
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
dades <- dades %>%
mutate(reagrupat = case_when(
device_used == "desktop" ~ "sobretaula",
device_used %in% c("mobile", "tablet") ~ "tàctil",
.default = device_used
))
head(dades)
#| label: eliminar-variables
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
dades <- dades %>%
mutate(reagrupat = case_when(
is_fraudulent == 0 ~ "no",
is_fraudulent == 1 ~ "si",
.default = is_fraudulent
))
#| label: eliminar-variables
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
dades <- dades %>%
mutate(is_fraudulent = case_when(
is_fraudulent == 0 ~ "no",
is_fraudulent == 1 ~ "si",
.default = is_fraudulent
))
#| label: carregar-dades
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
## Ruta ón es troba les nostres dades
path <- "./"
## Nom del fitxer de les dades
fitxer <- ""
## Carreguem la base de dades
dades <- read.csv(paste0(path, "Fraudulent_E-Commerce_Transaction_Data.csv"))
#| label: selecció-variables
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library(dplyr)
library(tidyr)
dades <- dades %>%
select(-Transaction.ID, -Customer.ID, -IP.Address, -Shipping.Address,
-Billing.Address) %>%
data.frame()
reticulate::repl_python()
#| echo: false
#| warning: false
#| message: false
#| error: false
quit
#| label: preprocessing-dates
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library(janitor)
dades <- dades %>%
janitor::clean_names()
# Visualitzem el nom de les columnes
colnames(dades)
#| label: elimina-tot-NAs
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
library(janitor)
# Visualitzem les dimensions de la nostra base de dades abans d'eliminar
cat("Tenim ", nrow(dades), " files i ", ncol(dades), " columnes\n")
dades <- dades %>%
janitor::remove_empty(which = c("rows", "cols"))
cat("Després de l'eliminació ens queda ", nrow(dades), " files i ", ncol(dades),
" columnes\n")
#| label: recoding
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
clases <- sapply(dades, class)
varCat <- names(clases)[which(clases %in% c("character", "factor"))]
for (vC in varCat) {
dades %>%
count(get(vC)) %>% print()
}
#| label: eliminar-variables
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
dades <- dades %>%
select(-transaction_date, -customer_location)
#| label: recodificar-variables
#| echo: true
#| eval: true
#| warning: false
#| message: false
#| error: false
dades <- dades %>%
mutate(is_fraudulent = case_when(
is_fraudulent == 0 ~ "no",
is_fraudulent == 1 ~ "si",
.default = is_fraudulent
))
colnames(dades)
dades <- dades %>%
mutate(is_fraudulent = case_when(
is_fraudulent == 0 ~ "no",
is_fraudulent == 1 ~ "si"
))
head(dades)
str(dades)
