filter(Nombre_Evaluador == Nombre_Evaluado) %>%  # Filtra los casos donde el evaluador no es el mismo que el evaluado
select(Nombre_Evaluado, Nota)
m <- match(estadisticos$Nombre_Evaluado, autoev$Nombre_Evaluado)
estadisticos[, "autoev"] <- autoev[m, "Nota"]
# ==============================================================================
# Calculamos algunos KPI's
## 1- Concordancia Autoevaluación vs Evaluación de Compañeros
## Diferencia absoluta entre la nota que se puso el estudiante y la media que
## le asignaron sus compañeros:
estadisticos[, "Concordancia"] <- abs(estadisticos[, "autoev"] - estadisticos[, "media_compas"])
## Si esta diferencia es alta, puede indicar sobrevaloración o infravaloración.
# ------------------------------------------------------------------------------
## Coeficiente de Variación de las Evaluaciones Recibidas (CV_recibido)
## Un CV alto indica que los compañeros tienen discrepancias en la evaluación del
## estudiante.
# ------------------------------------------------------------------------------
### Coeficiente de Variación de las Evaluaciones Asignadas (CV_asignado)
### Mide la coherencia del estudiante al evaluar a otros. Un CV bajo indica que evalúa de manera homogénea.
# ------------------------------------------------------------------------------
## Sesgo de Evaluación
## Diferencia entre la media que puso a sus compañeros y la media general del grupo.
estadisticos[, "sesgo_evaluacion"] <- estadisticos$autoev - estadisticos$media_compas
## Si es positiva, tiende a ser benevolente; si es negativa, tiende a ser más
## estricto que el promedio.
# ------------------------------------------------------------------------------
## Consistencia de Autoevaluación
## Relación entre la autoevaluación y la media de notas que el estudiante asignó.
estadisticos[, "consistencia_evaluacion"] <- estadisticos$autoev/estadisticos$media_compas
## Si es mayor a 1, se sobrevalora; si es menor a 1, se infravalora.
# Función para calcular el posicionamiento relativo en el grupo
# posicionamiento_relativo <- function(notas) {
#  sapply(notas, function(nota) {
#    sum(notas < nota) / length(notas) * 100
#  })
#}
# Datos de ejemplo: medias de evaluación recibidas por los estudiantes
# notas <- c(A = 7.5, B = 8.0, C = 6.5, D = 7.0, E = 8.5)
# Calcular el posicionamiento relativo
# posiciones <- posicionamiento_relativo(notas)
# Mostrar resultados
# print(data.frame(Estudiante = names(notas), Nota = notas, Posicionamiento = posiciones))
# ==============================================================================
## Metodología para Calcular una Nota Final (Escala 0-10)
## Puedes combinar estos KPIs en una métrica compuesta con ponderaciones ajustadas
## según la importancia. Aquí hay una posible fórmula:
notas <- 0.5*estadisticos$media_compas + 0.2*(10-estadisticos$Concordancia) +
0.1*(10 - estadisticos$cv_compas) + 0.1*(10-abs(estadisticos$sesgo_evaluacion) * 2) + 0.1*(10-estadisticos$cv_dado*10)
## 50% Media Evaluación de Compañeros: Es el criterio más relevante.
## 20% Concordancia Autoevaluación vs Compañeros: Penaliza autovaloraciones alejadas
## de la percepción del grupo.
## 10% Homogeneidad de Evaluaciones Recibidas: Se premia a los estudiantes que
## generan consenso.
## 10% Neutralidad en Evaluaciones: Penaliza si evalúa demasiado alto o bajo en
## relación con el grupo.
## 10% Coherencia en Evaluaciones Asignadas: Evita puntuaciones erráticas.
estadisticos$notas <- notas
# ==============================================================================
## Calculamos tipologias de estudiantes
distancias <- dist(distanceMark)
clusters <- stats::hclust(distancias, method = "ward.D2")
plot(clusters)
## Ahora vamos a realizar el clustering por grupo
for (g in unique(clase$PROYECTO)) {
if (g != "Online" & !is.na(g)) {
png(filename = paste0(pathCarpeta, "Clustering_", g, ".png"), width = 800, height = 480)
par(mfrow = c(1, 2))
alumnosGrupo <- clase$NOMBRE[which(clase$PROYECTO == g)]
matriz <- distanceMark[which(distanceMark$Nombre_Evaluador %in% alumnosGrupo), c("Nombre_Evaluador", alumnosGrupo)]
distancias <- dist(matriz)
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de estudiantes")
distancias <- dist(t(matriz[, -1]))
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de calificadores")
par(mfrow = c(1, 1))
dev.off()
}
}
# ==============================================================================
# Eliminamos al alumno por no tener notas
estadisticos <- estadisticos[which(!is.na(estadisticos$autoev)), ]
# ==============================================================================
# Añadimos el grupo de laboratorio que pertenece cada estudiante
m <- match(estadisticos$Nombre_Evaluado, df_completo$Nombre_Evaluado)
estadisticos$ProyectName <- df_completo$Proyecto[m]
# ==============================================================================
# Calculamos la posición relativa de cad grupo de estudiantes
grupos <- unique(estadisticos$ProyectName)
# Función para calcular el posicionamiento relativo en el grupo
posicionamiento_relativo <- function(notas) {
sapply(notas, function(nota) {
sum(notas < nota) / length(notas) * 100
})
}
estadisticos$posnRelNotaGrupo <- NA
estadisticos$posRelAutoev <- NA
estadisticos$posRelNotaGenerada <- NA
for (gr in grupos) {
# Nos quedamos con el grupo
quien <- which(estadisticos$ProyectName == gr)
## Calculamos la posicion para cada uno
#### Posicionamiento respecto al grupo
valor <- posicionamiento_relativo(estadisticos[quien, "media_compas"])
estadisticos[quien, "posnRelNotaGrupo"] <- valor
#### Posicionamiento nota respecto su autoevaluacion
valor <- posicionamiento_relativo(estadisticos[quien, "autoev"])
estadisticos[quien, "posRelAutoev"] <- valor
#### Posicionamiento nota generada
valor <- posicionamiento_relativo(estadisticos[quien, "notas"])
estadisticos[quien, "posRelNotaGenerada"] <- valor
}
# ==============================================================================
# Calculamos el valor de penalización de la nota
calcular_penalizador <- function(autoeval, media_recibida, sd_recibida,
media_asignada, sd_asignada,
posicion_relativa) {
# Coeficiente de variación (evitamos división por 0)
cv_recibido <- ifelse(media_recibida > 0, pmin(sd_recibida / media_recibida, 1), 1)
cv_asignado <- ifelse(media_asignada > 0, pmin(sd_asignada / media_asignada, 1), 1)
# Diferencia autoevaluación vs compañeros
diff_autoeval <- pmin(abs(autoeval - media_recibida) / 10, 1)
# Sesgo de evaluación
sesgo_eval <- pmin(abs(media_asignada - media_recibida) / 10, 1)
# Consistencia de autoevaluación respecto a cómo evalúa
consistencia <- ifelse(media_asignada > 0, autoeval / media_asignada, 1)
consistencia_penal <- pmin(abs(consistencia - 1), 1)
# Posicionamiento ya normalizado
pos_norm <- posicion_relativa / 100
# Cálculo del penalizador
penalizador <- -0.3 * diff_autoeval -
0.2 * cv_recibido -
0.1 * cv_asignado -
0.2 * sesgo_eval -
0.1 * consistencia_penal +
0.2 * (pos_norm - 0.5)
# Asegurar que el resultado está entre -1 y 1
penalizador <- pmax(pmin(penalizador, 1), -1)
return(round(penalizador, 3))
}
estadisticos$penalizacion <- calcular_penalizador(autoeval = estadisticos$autoev,
media_recibida = estadisticos$media_compas,
sd_recibida = estadisticos$sd_compas,
media_asignada = estadisticos$media_dada,
sd_asignada = estadisticos$sd_dada,
posicion_relativa = (estadisticos$posnRelNotaGrupo)/100)
estadisticos$notaFinalEquipo <- pmin(pmax(estadisticos$media_compas + estadisticos$penalizacion, 0), 10)
pdf(filename = paste0(pathCarpeta, "Clustering_VotosD3.pdf"), width = 800, height = 480)
?pdf
pdf(file = paste0(pathCarpeta, "Clustering_VotosD3.pdf"), width = 800, height = 480)
## Ahora vamos a realizar el clustering por grupo
for (g in unique(clase$PROYECTO)) {
if (g != "Online" & !is.na(g)) {
par(mfrow = c(1, 2))
alumnosGrupo <- clase$NOMBRE[which(clase$PROYECTO == g)]
matriz <- distanceMark[which(distanceMark$Nombre_Evaluador %in% alumnosGrupo), c("Nombre_Evaluador", alumnosGrupo)]
distancias <- dist(matriz)
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de estudiantes")
distancias <- dist(t(matriz[, -1]))
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de calificadores")
par(mfrow = c(1, 1))
}
}
dev.off()
dev.off()
pdf(file = paste0(pathCarpeta, "Clustering_VotosD3.pdf"))
## Ahora vamos a realizar el clustering por grupo
for (g in unique(clase$PROYECTO)) {
if (g != "Online" & !is.na(g)) {
par(mfrow = c(1, 2))
alumnosGrupo <- clase$NOMBRE[which(clase$PROYECTO == g)]
matriz <- distanceMark[which(distanceMark$Nombre_Evaluador %in% alumnosGrupo), c("Nombre_Evaluador", alumnosGrupo)]
distancias <- dist(matriz)
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de estudiantes")
distancias <- dist(t(matriz[, -1]))
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de calificadores")
par(mfrow = c(1, 1))
}
}
dev.off()
## Ahora vamos a realizar el clustering por grupo
for (g in unique(clase$PROYECTO)) {
if (g != "Online" & !is.na(g)) {
par(mfrow = c(1, 2))
alumnosGrupo <- clase$NOMBRE[which(clase$PROYECTO == g)]
matriz <- distanceMark[which(distanceMark$Nombre_Evaluador %in% alumnosGrupo), c("Nombre_Evaluador", alumnosGrupo)]
distancias <- dist(matriz)
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de estudiantes")
distancias <- dist(t(matriz[, -1]))
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de calificadores")
par(mfrow = c(1, 1))
}
}
## Ahora vamos a realizar el clustering por grupo
for (g in unique(clase$PROYECTO)) {
if (g != "Online" & !is.na(g)) {
par(mfrow = c(1, 2))
alumnosGrupo <- clase$NOMBRE[which(clase$PROYECTO == g)]
matriz <- distanceMark[which(distanceMark$Nombre_Evaluador %in% alumnosGrupo), c("Nombre_Evaluador", alumnosGrupo)]
distancias <- dist(matriz)
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de estudiantes")
distancias <- dist(t(matriz[, -1]))
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de calificadores")
par(mfrow = c(1, 1))
}
}
pdf(file = paste0(pathCarpeta, "Clustering_VotosD3.pdf"))
## Ahora vamos a realizar el clustering por grupo
for (g in unique(clase$PROYECTO)) {
if (g != "Online" & !is.na(g)) {
par(mfrow = c(1, 2))
alumnosGrupo <- clase$NOMBRE[which(clase$PROYECTO == g)]
matriz <- distanceMark[which(distanceMark$Nombre_Evaluador %in% alumnosGrupo), c("Nombre_Evaluador", alumnosGrupo)]
distancias <- dist(matriz)
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de estudiantes")
distancias <- dist(t(matriz[, -1]))
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de calificadores")
par(mfrow = c(1, 1))
}
}
dev.off()
dev.off()
# ==============================================================================
# Eliminamos al alumno por no tener notas
estadisticos <- estadisticos[which(!is.na(estadisticos$autoev)), ]
# ==============================================================================
# Añadimos el grupo de laboratorio que pertenece cada estudiante
m <- match(estadisticos$Nombre_Evaluado, df_completo$Nombre_Evaluado)
estadisticos$ProyectName <- df_completo$Proyecto[m]
# ==============================================================================
# Calculamos la posición relativa de cad grupo de estudiantes
grupos <- unique(estadisticos$ProyectName)
# Función para calcular el posicionamiento relativo en el grupo
posicionamiento_relativo <- function(notas) {
sapply(notas, function(nota) {
sum(notas < nota) / length(notas) * 100
})
}
estadisticos$posnRelNotaGrupo <- NA
estadisticos$posRelAutoev <- NA
estadisticos$posRelNotaGenerada <- NA
for (gr in grupos) {
# Nos quedamos con el grupo
quien <- which(estadisticos$ProyectName == gr)
## Calculamos la posicion para cada uno
#### Posicionamiento respecto al grupo
valor <- posicionamiento_relativo(estadisticos[quien, "media_compas"])
estadisticos[quien, "posnRelNotaGrupo"] <- valor
#### Posicionamiento nota respecto su autoevaluacion
valor <- posicionamiento_relativo(estadisticos[quien, "autoev"])
estadisticos[quien, "posRelAutoev"] <- valor
#### Posicionamiento nota generada
valor <- posicionamiento_relativo(estadisticos[quien, "notas"])
estadisticos[quien, "posRelNotaGenerada"] <- valor
}
# ==============================================================================
# Calculamos el valor de penalización de la nota
calcular_penalizador <- function(autoeval, media_recibida, sd_recibida,
media_asignada, sd_asignada,
posicion_relativa) {
# Coeficiente de variación (evitamos división por 0)
cv_recibido <- ifelse(media_recibida > 0, pmin(sd_recibida / media_recibida, 1), 1)
cv_asignado <- ifelse(media_asignada > 0, pmin(sd_asignada / media_asignada, 1), 1)
# Diferencia autoevaluación vs compañeros
diff_autoeval <- pmin(abs(autoeval - media_recibida) / 10, 1)
# Sesgo de evaluación
sesgo_eval <- pmin(abs(media_asignada - media_recibida) / 10, 1)
# Consistencia de autoevaluación respecto a cómo evalúa
consistencia <- ifelse(media_asignada > 0, autoeval / media_asignada, 1)
consistencia_penal <- pmin(abs(consistencia - 1), 1)
# Posicionamiento ya normalizado
pos_norm <- posicion_relativa / 100
# Cálculo del penalizador
penalizador <- -0.3 * diff_autoeval -
0.2 * cv_recibido -
0.1 * cv_asignado -
0.2 * sesgo_eval -
0.1 * consistencia_penal +
0.2 * (pos_norm - 0.5)
# Asegurar que el resultado está entre -1 y 1
penalizador <- pmax(pmin(penalizador, 1), -1)
return(round(penalizador, 3))
}
estadisticos$penalizacion <- calcular_penalizador(autoeval = estadisticos$autoev,
media_recibida = estadisticos$media_compas,
sd_recibida = estadisticos$sd_compas,
media_asignada = estadisticos$media_dada,
sd_asignada = estadisticos$sd_dada,
posicion_relativa = (estadisticos$posnRelNotaGrupo)/100)
estadisticos$notaFinalEquipo <- pmin(pmax(estadisticos$media_compas + estadisticos$penalizacion, 0), 10)
estadisticos
# ==============================================================================
# Guardamos una copia de las evaluaciones
library(xlsx)
write.xlsx(distanceMark, file = paste0(pathCarpeta, "2425AMDQ1.xlsx"),
sheetName = "matrizDistancias")
write.xlsx(estadisticos, file = paste0(pathCarpeta, "2425AMDQ1.xlsx"),
sheetName = "tablaEstadistica", append = TRUE)
10/9.764
# ==============================================================================
# Descriptivo notas entre alumnos
# ==============================================================================
library(readxl)
# pathCarpeta <- "/Users/ramitjans/Desktop/DOCENCIA/Evaluación/AMD/"
pathCarpeta <- "D:/DOCENCIA/CURS/00 - DOCENCIA 2024 - 2025/S02/S02 - UPC - GRAU D'ESTADÍSTICA - ANÁLISIS MULTIVARIANT DE DADES/00 - Gestión/"
# Creamos nuestros alumnos
clase <- data.frame(readxl::read_excel(paste0(pathCarpeta, "Notas.xlsx")))
## Ficheros de Calificaciones
ficheros <- list.files(paste0(pathCarpeta, "qualificacions"))
## Vamos a identificar que individuos no tienen las calificaciones entregadas
ids <- unlist(strsplit(ficheros, "_"))[c(F, T, F)]
quien <- which(clase$IDENTIFICADOR %in% ids)
clase[quien, "Entrega"] <- "SI"
quien <- which(is.na(clase$Entrega) & (!clase$PROYECTO %in% c("Online", NA)))
clase[quien, ]
# ==============================================================================
# Agrupamos todas las notas obtenidas
library(dplyr)
library(purrr)
library(readr)
# Obtener la lista de archivos CSV en la carpeta
archivos_csv <- list.files(path = paste0(pathCarpeta, "qualificacions"),
pattern = "\\.csv$", full.names = TRUE)
# Leer y combinar todos los archivos en un solo dataframe
df_completo <- archivos_csv %>%
map_dfr(read_csv) # Aplica read_csv a cada archivo y los une con rbind
#df_completo <- archivos_csv %>%
#  map(~ read_csv(.x, col_types = cols(.default = "c"))) %>%
#  bind_rows()
# Ver los primeros registros
head(df_completo)
# AÑADIMOS EL nombre del evaluador
## Cambiamos el nombre
colnames(df_completo)[which(colnames(df_completo) == "Nombre")] <- "Nombre_Evaluado"
## Añadimos la información del evaluador
m <- match(df_completo$Evaluador, clase$IDENTIFICADOR)
df_completo[, "Nombre_Evaluador"] <- clase$NOMBRE[m]
# Creamos la matriz cuadrada
library(reshape2)
distanceMark <- reshape2::dcast(df_completo, formula = "Nombre_Evaluador ~ Nombre_Evaluado",
fun.aggregate = sum, value.var = "Nota")
# Calculamos diferentes valores respecto las notas obtenidas
library(dplyr)
notaGlobal <- df_completo %>%
select(Nombre_Evaluado, Nota) %>%
group_by(Nombre_Evaluado) %>%
summarise(media = mean(Nota, na.rm = TRUE))
notaGlobal
resumen <- df_completo %>%
filter(Nombre_Evaluador != Nombre_Evaluado) %>%  # Filtra los casos donde el evaluador no es el mismo que el evaluado
select(Nombre_Evaluado, Nota) %>%
group_by(Nombre_Evaluado) %>%
summarise(
media_compas = mean(Nota, na.rm = TRUE),
sd_compas = sd(Nota, na.rm = TRUE),
n = n()+1,
cv_compas = sd_compas/media_compas) %>% data.frame()
resEval <- df_completo %>%
filter(Nombre_Evaluador != Nombre_Evaluado) %>%  # Filtra los casos donde el evaluador no es el mismo que el evaluado
select(Nombre_Evaluador, Nota) %>%
group_by(Nombre_Evaluador) %>%
summarise(
media_dada = mean(Nota, na.rm = TRUE),
sd_dada = sd(Nota, na.rm = TRUE),
n = n(),
cv_dado = sd_dada / media_dada
)
m <- match(resumen$Nombre_Evaluado, resEval$Nombre_Evaluador)
resumen[, colnames(resEval)] <- resEval[m, ]
estadisticos <- resumen %>%
select(Nombre_Evaluado, media_compas, sd_compas, n, cv_compas,
media_dada, sd_dada, cv_dado)
autoev <- df_completo %>%
filter(Nombre_Evaluador == Nombre_Evaluado) %>%  # Filtra los casos donde el evaluador no es el mismo que el evaluado
select(Nombre_Evaluado, Nota)
m <- match(estadisticos$Nombre_Evaluado, autoev$Nombre_Evaluado)
estadisticos[, "autoev"] <- autoev[m, "Nota"]
m <- match(estadisticos$Nombre_Evaluado, notaGlobal$Nombre_Evaluado)
m
estadisticos[, "media_global"] <- notaGlobal$media[m]
# ==============================================================================
# Calculamos algunos KPI's
## 1- Concordancia Autoevaluación vs Evaluación de Compañeros
## Diferencia absoluta entre la nota que se puso el estudiante y la media que
## le asignaron sus compañeros:
estadisticos[, "Concordancia"] <- abs(estadisticos[, "autoev"] - estadisticos[, "media_compas"])
# ------------------------------------------------------------------------------
## Sesgo de Evaluación
## Diferencia entre la media que puso a sus compañeros y la media general del grupo.
estadisticos[, "sesgo_evaluacion"] <- estadisticos$autoev - estadisticos$media_compas
# ------------------------------------------------------------------------------
## Consistencia de Autoevaluación
## Relación entre la autoevaluación y la media de notas que el estudiante asignó.
estadisticos[, "consistencia_evaluacion"] <- estadisticos$autoev/estadisticos$media_compas
notas <- 0.5*estadisticos$media_compas + 0.2*(10-estadisticos$Concordancia) +
0.1*(10 - estadisticos$cv_compas) + 0.1*(10-abs(estadisticos$sesgo_evaluacion) * 2) + 0.1*(10-estadisticos$cv_dado*10)
## 50% Media Evaluación de Compañeros: Es el criterio más relevante.
## 20% Concordancia Autoevaluación vs Compañeros: Penaliza autovaloraciones alejadas
## de la percepción del grupo.
## 10% Homogeneidad de Evaluaciones Recibidas: Se premia a los estudiantes que
## generan consenso.
## 10% Neutralidad en Evaluaciones: Penaliza si evalúa demasiado alto o bajo en
## relación con el grupo.
## 10% Coherencia en Evaluaciones Asignadas: Evita puntuaciones erráticas.
estadisticos$notas <- notas
# ==============================================================================
## Calculamos tipologias de estudiantes
distancias <- dist(distanceMark)
clusters <- stats::hclust(distancias, method = "ward.D2")
plot(clusters)
pdf(file = paste0(pathCarpeta, "Clustering_VotosD3.pdf"))
## Ahora vamos a realizar el clustering por grupo
for (g in unique(clase$PROYECTO)) {
if (g != "Online" & !is.na(g)) {
par(mfrow = c(1, 2))
alumnosGrupo <- clase$NOMBRE[which(clase$PROYECTO == g)]
matriz <- distanceMark[which(distanceMark$Nombre_Evaluador %in% alumnosGrupo), c("Nombre_Evaluador", alumnosGrupo)]
distancias <- dist(matriz)
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de estudiantes")
distancias <- dist(t(matriz[, -1]))
clusters <- hclust(distancias, method = "ward.D2")
plot(clusters, labels = alumnosGrupo, main = "Perfiles de calificadores")
par(mfrow = c(1, 1))
}
}
dev.off()
# ==============================================================================
# Eliminamos al alumno por no tener notas
estadisticos <- estadisticos[which(!is.na(estadisticos$autoev)), ]
# ==============================================================================
# Añadimos el grupo de laboratorio que pertenece cada estudiante
m <- match(estadisticos$Nombre_Evaluado, df_completo$Nombre_Evaluado)
estadisticos$ProyectName <- df_completo$Proyecto[m]
# ==============================================================================
# Calculamos la posición relativa de cad grupo de estudiantes
grupos <- unique(estadisticos$ProyectName)
# Función para calcular el posicionamiento relativo en el grupo
posicionamiento_relativo <- function(notas) {
sapply(notas, function(nota) {
sum(notas < nota) / length(notas) * 100
})
}
estadisticos$posnRelNotaGrupo <- NA
estadisticos$posRelAutoev <- NA
estadisticos$posRelNotaGenerada <- NA
for (gr in grupos) {
# Nos quedamos con el grupo
quien <- which(estadisticos$ProyectName == gr)
## Calculamos la posicion para cada uno
#### Posicionamiento respecto al grupo
valor <- posicionamiento_relativo(estadisticos[quien, "media_compas"])
estadisticos[quien, "posnRelNotaGrupo"] <- valor
#### Posicionamiento nota respecto su autoevaluacion
valor <- posicionamiento_relativo(estadisticos[quien, "autoev"])
estadisticos[quien, "posRelAutoev"] <- valor
#### Posicionamiento nota generada
valor <- posicionamiento_relativo(estadisticos[quien, "notas"])
estadisticos[quien, "posRelNotaGenerada"] <- valor
}
# ==============================================================================
# Calculamos el valor de penalización de la nota
calcular_penalizador <- function(autoeval, media_recibida, sd_recibida,
media_asignada, sd_asignada,
posicion_relativa) {
# Coeficiente de variación (evitamos división por 0)
cv_recibido <- ifelse(media_recibida > 0, pmin(sd_recibida / media_recibida, 1), 1)
cv_asignado <- ifelse(media_asignada > 0, pmin(sd_asignada / media_asignada, 1), 1)
# Diferencia autoevaluación vs compañeros
diff_autoeval <- pmin(abs(autoeval - media_recibida) / 10, 1)
# Sesgo de evaluación
sesgo_eval <- pmin(abs(media_asignada - media_recibida) / 10, 1)
# Consistencia de autoevaluación respecto a cómo evalúa
consistencia <- ifelse(media_asignada > 0, autoeval / media_asignada, 1)
consistencia_penal <- pmin(abs(consistencia - 1), 1)
# Posicionamiento ya normalizado
pos_norm <- posicion_relativa / 100
# Cálculo del penalizador
penalizador <- -0.3 * diff_autoeval -
0.2 * cv_recibido -
0.1 * cv_asignado -
0.2 * sesgo_eval -
0.1 * consistencia_penal +
0.2 * (pos_norm - 0.5)
# Asegurar que el resultado está entre -1 y 1
penalizador <- pmax(pmin(penalizador, 1), -1)
return(round(penalizador, 3))
}
estadisticos$penalizacion <- calcular_penalizador(autoeval = estadisticos$autoev,
media_recibida = estadisticos$media_compas,
sd_recibida = estadisticos$sd_compas,
media_asignada = estadisticos$media_dada,
sd_asignada = estadisticos$sd_dada,
posicion_relativa = (estadisticos$posnRelNotaGrupo)/100)
estadisticos$notaFinalEquipo <- pmin(pmax(estadisticos$media_compas + estadisticos$penalizacion, 0), 10)
# ==============================================================================
# Guardamos una copia de las evaluaciones
library(xlsx)
write.xlsx(distanceMark, file = paste0(pathCarpeta, "2425AMDQ1.xlsx"),
sheetName = "matrizDistancias")
write.xlsx(estadisticos, file = paste0(pathCarpeta, "2425AMDQ1.xlsx"),
sheetName = "tablaEstadistica", append = TRUE)
1/7
